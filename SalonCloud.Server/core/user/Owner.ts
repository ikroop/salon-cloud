


import { AbstractAdministrator } from './AbstractAdministrator'
import { SalonCloudResponse } from './../SalonCloudResponse'
import { UserProfile, UserData } from './../../modules/userManagement/UserData'
import { AppointmentData } from './../../modules/appointmentManagement/AppointmentData'
import { DailyDayData, WeeklyDayData } from './../../modules/schedule/ScheduleData'
import { SalonInformation, SalonSetting } from './../../modules/salonManagement/SalonData'
import { Verification } from './../verification/Verification'
import { Authentication } from './../authentication/Authentication'
import { EmployeeManagement } from './../../modules/userManagement/EmployeeManagement'


export class Owner extends AbstractAdministrator {

    employeeManagementDP: EmployeeManagement;

    /**
     * @name: addEmployee
     * @param: {salonId: string, employeeData: UserData, verificationObj: Verification}
     * @return: Promise<SalonCloudResponse<any>>
     * @returnDataStructure: {
        salon_id: string,
        uid: string,
        username: string,
        fullname: string,
        role: number
        }
     * -- validation;
     * -- create employee account with username
     * -- send verification if successfully create account
     * -- add new profile to the account
     * -- return 
     * 
     */
    public async addEmployee(salonId : string, username: string, employeeProfile: UserProfile, verificationObj: Verification) : Promise<SalonCloudResponse<any>>{
        var response : SalonCloudResponse<any> =  {
            code: undefined,
            data: undefined,
            err: undefined
        }
        
        // validation:

        // create employee account with username;
        var authObject = new Authentication();
        var accountCreation = await authObject.signUpWithAutoGeneratedPassword(username);

        // send verification if successfully create account
        if(accountCreation.err){
            response.err = accountCreation.err;
            response.code = accountCreation.code;
            return response;
        }else{
            let content = "Your account with Salonhelp has been successfully created! Username: "+username+", Password: "+accountCreation.data.password;
            verificationObj.sendContent(username, content);
        }

        // add new profile to the account
        let addProfileAction = await this.employeeManagementDP.addProfile(accountCreation.data.user._id, employeeProfile);

        response.data = {
            uid: accountCreation.data.user._id,
            salon_id: salonId,
            username: username,
            fullname: employeeProfile.fullname,
            role: employeeProfile.role,
        }
        response.code = 200;

        return response;

        
    }

    public activateEmployee(employeeId: string): SalonCloudResponse<boolean> {

        return;
    };

    public activateSalon(salonId: string): boolean {

        return;

    };

    public addService() {

        return;
    };

    public deactivateEmployee(emplpoyeeId: string): boolean {

        return;
    };

    public deativateSalon(salonId: string): boolean {
        return;
    };

    public removeService() {

        return;
    };

    public updateEmployeeProfile(employee: UserProfile): boolean {

        return;
    };

    public updateSalonDailySchedule(dailySchedule: DailyDayData) {

    };

    public updateSalonInformation(info: SalonInformation) {

    };

    public updateSalonSetting(setting: SalonSetting) {

    };

    public updateSalonWeeklySchedule(weeklySchedule: WeeklyDayData) {

    };

    public updateService() {

    };

    public getSchedule(start: Date, end: Date): SalonCloudResponse<Array<DailyDayData>> {

        return;
    };

    protected filterProfileData(user: UserProfile): UserProfile {

        return;
    }
}