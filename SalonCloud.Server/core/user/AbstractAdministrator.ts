

import { AbstractEmployee } from './AbstractEmployee'
import { UserProfile, UserData } from './../../modules/userManagement/UserData'
import { UserModel } from './../../modules/usermanagement/UserModel'
import { AppointmentData } from './../../modules/appointmentManagement/AppointmentData'
import { AdministratorBehavior } from './AdministratorBehavior'
import { BookingAppointment } from './../../modules/appointmentManagement/BookingAppointment';
import { SalonCloudResponse } from './../SalonCloudResponse'
import { ErrorMessage } from './../ErrorMessage'
import { CustomerManagement } from './../../modules/usermanagement/CustomerManagement'
import {Authentication} from './../authentication/Authentication'
import { DailyScheduleData, WeeklyScheduleData } from './../../modules/schedule/ScheduleData';

export abstract class AbstractAdministrator extends AbstractEmployee implements AdministratorBehavior {

    public cancelAppointment(appointmentId: string) {

    };

    public getAllCustomer(): Array<UserProfile> {
        return new Array<UserProfile>();

    };

    public getAllEmployeeProfile(): Array<UserProfile> {
        return new Array<UserProfile>();
    };

    public getCustomerById(customerId: string): UserProfile {
        return;
    };

    public getEmployeeProfile(employeeId: string): UserProfile {
        return;
    };

    public async saveAppointment(appointment: any): Promise<SalonCloudResponse<AppointmentData>> {
        var response: SalonCloudResponse<AppointmentData> = {
            data: undefined,
            code: undefined,
            err: undefined
        }

        var appointmentByPhone: BookingAppointment;

        // Check booking available time

        var bookingTimeList = appointmentByPhone.checkBookingAvailableTimes(appointment);

        if (!bookingTimeList) {
            return;
        }

        // Salon has available time for appointment

        // find customer by phone
        var customerId: string;
        var findCustomer = await this.findCustomerByPhone(appointment.phone);

        if (findCustomer.err) {
            response.err = findCustomer.err;
            response.code = findCustomer.code;
            return response;
        } else if (findCustomer.data == false) {
            //  Create customer account with phone number (no customer account found)
            var customerCreation = await this.createCustomerAccount(appointment, this.salonManagementDP.salonId);
            // get customer id
            customerId = customerCreation.data._id
        } else {
            // get customer id
            customerId = findCustomer.data._id;
        }



        // Todo: Create salonProfile if necessary

        // create receipt 
        // TODO:

        // create appointment
        var result = appointmentByPhone.createAppointment(appointment);

        // Normalization return data
        // TODO:

        return;

    };
    // This method find if a customer already exists in the system
    // DataReturn is 'false' if no exists
    // DataReturn is a 'UserData' if exists
    private async findCustomerByPhone(phone: string): Promise<SalonCloudResponse<UserData>> {


        var response: SalonCloudResponse<boolean> = {
            data: undefined,
            code: undefined,
            err: undefined
        };
        var userFinding = UserModel.findOne({ "username": phone }).exec();
        await userFinding.then(function (docs) {
            if (docs) {
                response.data = docs;
            } else {
                response.data = false;
            }
            response.code = 200
        }, function (err) {
            response.err = err;
            response.code = 500;
        })

        return response;




    }

    private async createCustomerAccount(customerData: any, salonId: string): Promise<SalonCloudResponse<UserData>> {
        var response : SalonCloudResponse<UserData> = {
            code: undefined,
            data: undefined,
            err: undefined
        }
        var customerManagementDP = new CustomerManagement(salonId);
        var authDP = new Authentication();

        // create customer account with phone
        var customerAccountCreation = await  authDP.signUpWithAutoGeneratedPassword(customerData.customer_phone);
        if(customerAccountCreation.err){
            response.err = customerAccountCreation.err;
            response.code = customerAccountCreation.code;
            return response;
        }

        // add salon profile to customer account
        var profileCreation = await customerManagementDP.addCustomerProfile(customerAccountCreation.data._id ,customerData);
        if(profileCreation.err){
            response.err = profileCreation.err;
            response.code = profileCreation.code;
            return response;
        }

        response.data = customerAccountCreation.data;
        response.code = 200;
        return response;


    }


    public updateAppointment(appointment: AppointmentData) {

    };

    public updateDailySchedule(employeeId: string, dailySchedule: DailyScheduleData){
    };

    public updateWeeklySchedule(employeeId: string, weeklySchedule: WeeklyScheduleData) {

    };

    protected filterAppointmentFields(appointment: AppointmentData): AppointmentData {
        return;
    };

    protected abstract filterProfileData(user: UserProfile): UserProfile;
}